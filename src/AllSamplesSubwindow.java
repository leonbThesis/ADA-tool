
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.*;

/**
 *
 * @author Leon Bardenheuer
 */

/**
 *  Sources:
 * 
 *  https://docs.oracle.com/javase/tutorial/uiswing/components/table.html
 *  https://docs.oracle.com/javase/7/docs/api/javax/swing/table/DefaultTableModel.html
 * 
 */
public class AllSamplesSubwindow extends javax.swing.JFrame {

    
    /*ATTRIBUTES*/
    
    
    Sample[] samplesArr;
    SingleSampleSubwindow singleSampleSubwindow;
    DefaultTableModel dtModel;
    TableRowSorter<TableModel> trSorter;
    
    
    /*METHODS*/
    
    public AllSamplesSubwindow() {
        initComponents();
        /*see other constructor*/
    }

    AllSamplesSubwindow(Sample[] samplesArr) {
        initComponents();
        this.setTitle("Analysis results of all samples");
        
        this.samplesArr = samplesArr;
        dtModel = (DefaultTableModel) tbSamples.getModel();
        trSorter = new TableRowSorter<TableModel>(dtModel);
        
        /*Table Formating*/
        tbSamples.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tbSamples.getColumnModel().getColumn(0).setPreferredWidth(45);
        tbSamples.getColumnModel().getColumn(1).setPreferredWidth(470);
        tbSamples.getColumnModel().getColumn(2).setPreferredWidth(58);
        tbSamples.getColumnModel().getColumn(3).setPreferredWidth(685);
        
        /*Implement Sorting*/
        tbSamples.setRowSorter(trSorter);
        
        List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(2, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(3, SortOrder.ASCENDING));
        trSorter.setSortKeys(sortKeys); 
        
        fillTable();
    }
    
    
    /*METHODS*/
    
    
    public void fillTable(){
        for(int i=0; i<samplesArr.length; i++){
            dtModel.addRow(new Object[]{i,samplesArr[i].namePretty,samplesArr[i].score,samplesArr[i].resultShort});
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbSamples = new javax.swing.JTable();
        lbCount = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbSamples.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tbSamples.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "####", "name / SHA-256", "score", "result (short form)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbSamples.setColumnSelectionAllowed(true);
        tbSamples.getTableHeader().setReorderingAllowed(false);
        tbSamples.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbSamplesMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbSamplesMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbSamples);
        tbSamples.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tbSamples.getColumnModel().getColumnCount() > 0) {
            tbSamples.getColumnModel().getColumn(0).setResizable(false);
            tbSamples.getColumnModel().getColumn(1).setResizable(false);
            tbSamples.getColumnModel().getColumn(2).setResizable(false);
            tbSamples.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1270, -1));

        lbCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbCount.setText("0");
        getContentPane().add(lbCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, 70, -1));

        jLabel2.setText("samples currently selected");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 450, -1, -1));

        jLabel1.setText("Open individual results with a double-click  -  depending on system and sample size, this may take a while");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 450, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tbSamplesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbSamplesMouseClicked
        
        /*if double click on table entry*/
        if(evt.getClickCount()==2 && tbSamples.getSelectedRow()!=-1){
            
            /*pop-up new subwindow (but only one at the time)*/
            if(singleSampleSubwindow != null){
                singleSampleSubwindow.dispose();
            }
            /*Cannot use samplesArr[tbSamples.getSelectedRow()] here, because sorting*/
            tbSamples.getSelectedRowCount();
            
            /*opens new subwindow with selected sample as parameter*/
            /*for obtaining sample: look in the array of all samples at the place of the cell value of the selected row in column 0 (index value)*/
            singleSampleSubwindow = new SingleSampleSubwindow(samplesArr[(int)tbSamples.getValueAt(tbSamples.getSelectedRow(), 0)]);
            singleSampleSubwindow.setVisible(true);
        }
    }//GEN-LAST:event_tbSamplesMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        /*if user closes subwindow AllSamples, then also close opened singleSample subsubwindow*/
        if(singleSampleSubwindow != null){
                singleSampleSubwindow.dispose();
        }
    }//GEN-LAST:event_formWindowClosed

    private void tbSamplesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbSamplesMouseReleased
        /*if mouse button is released and some rows are selected, show number of selected rows*/
        if(tbSamples.getSelectedRow()!=-1){
            lbCount.setText(Integer.toString(tbSamples.getSelectedRowCount()));
        }
    }//GEN-LAST:event_tbSamplesMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllSamplesSubwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllSamplesSubwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllSamplesSubwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllSamplesSubwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AllSamplesSubwindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCount;
    private javax.swing.JTable tbSamples;
    // End of variables declaration//GEN-END:variables
}
